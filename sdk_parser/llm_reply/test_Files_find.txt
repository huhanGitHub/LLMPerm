While the Java NIO File API can be used in Android, the "Files.find()" method is available from API 26 and up. Here's a simple usage example of the Files.find() method:

```java
@RequiresApi(api = Build.VERSION_CODES.O)
public void test_Files_find() {
    try {
        // Get the path to the external storage directory
        File externalStorage = Environment.getExternalStorageDirectory();
        Path path = externalStorage.toPath();

        // Prepare a file name filter that matches PNG files
        BiPredicate<Path, BasicFileAttributes> matcher =
                (filePath, fileAttr) -> fileAttr.isRegularFile() && filePath.toString().endsWith(".png");

        // Use Files.find() to find all PNG files in the directory and subdirectories
        try (Stream<Path> stream = Files.find(path, Integer.MAX_VALUE, matcher)) {
            // I'm just printing the files here, replace with your own logic
            stream.forEach(matchedPath -> Log.d("test_Files_find", matchedPath.toString()));
        } catch (IOException e) {
            e.printStackTrace();
        }

    } catch (NoSuchFileException e) {
        Log.e("test_Files_find", "Directory not found: " + e.getMessage());
    }
}
```

This method uses the Files.find() method to search the external storage directory and all subdirectories for ".png" files, and then logs all the file paths in the logcat.

To call this method, make sure your activity is requesting storage permissions (READ_EXTERNAL_STORAGE). You also need to update your Manifest file to include the permission.

Note: The method was marked with `@RequiresApi(api = Build.VERSION_CODES.O)` because this Files.find() feature is only available from API 26 (Android 8.0) onwards.

Remember about checking the runtime permission for reading the file system. If not given, your system won't be able to access the desired path and this might crash your application.