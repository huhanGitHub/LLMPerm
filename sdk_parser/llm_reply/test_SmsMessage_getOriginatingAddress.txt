Sure, here is a method of getting the originating address from an incoming SMS message using Android's SmsMessage API:

```java
    @RequiresApi(api = Build.VERSION_CODES.M)
    public void test_SmsMessage_getOriginatingAddress(SmsMessage smsMessage) {
        // Get the originating address (phone number) of this SMS message.
        String originatingAddress = smsMessage.getOriginatingAddress();

        // Log the originating address for debugging purposes.
        Log.d("SMSMessage", "Originating Address: " + originatingAddress);
    }
```
To use this method, you would need an instance of the SmsMessage class. Here is an example of how you can obtain it in a BroadcastReceiver:

```java
    public class SmsBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            Bundle bundle = intent.getExtras();
            if (bundle != null) {
                // Retrieve the SMS message received.
                Object[] pdus = (Object[]) bundle.get("pdus");
                final SmsMessage[] messages = new SmsMessage[pdus.length];
                for (int i = 0; i < pdus.length; i++) {
                    messages[i] = SmsMessage.createFromPdu((byte[]) pdus[i]);
                }
                if (messages.length > 0) {
                    // Call the 'test_SmsMessage_getOriginatingAddress' method using the first message.
                    test_SmsMessage_getOriginatingAddress(messages[0]);
                }
            }
        }
    }
```

Note: The above code example is based on Android M (API 23) and later. If you are targeting earlier versions of Android, you may need to use getDisplayOriginatingAddress() instead of getOriginatingAddress().