Here is a simple test method that utilized the close() method of MemoryHandler in Android JAVA API. This method creates a MemoryHandler, adds it to a Logger, then calls the close() method and checks if it has been closed successfully.

Do note that, MemoryHandler.close() releases any resources associated with this MemoryHandler and then it calls the close method on the target Handler. In real scenario, by closing MemoryHandler, you are effectively shutting down the handler and it should not be used again.

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);       
        try {
            test_MemoryHandler_close();
        } catch (SecurityException e) {
            e.printStackTrace();
        }
    }

    public void test_MemoryHandler_close() throws SecurityException {
        // Assuming that you're logging to a memory file
        Handler targetHandler = new FileHandler("memoryLog.log");
        
        // You create a MemoryHandler with a target of aforementioned FileHandler
        MemoryHandler handler = new MemoryHandler(targetHandler, 1000, Level.ALL);

        // Assume we add this handler to global application logger
        Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
        logger.addHandler(handler);

        // Verify that the handler got added.
        boolean isHandlerAdded = Arrays.asList(logger.getHandlers()).contains(handler);
        if(isHandlerAdded){
            System.out.println("MemoryHandler added successfully!");
        }
          
        // Now we close the handler. Once it is called, the handler shouldn't be used.
        handler.close();
        
        // Let's check if close was successful by trying to add the handler to logger once more
        try {
            logger.addHandler(handler);
            System.out.println("MemoryHandler is still open!");
        } catch (SecurityException e) {
            System.out.println("MemoryHandler is closed successfully!");
        }
    }
}
Please ensure you manage your permissions to read and write storage properly, as this code assumes that you are writing logs to a file memoryLog.log in local storage.

Also, this is a very simple use of Java Util Logging (JUL). In real-world scenarios, you may have a more complex logging setup with various Handler and/or Logger configurations.