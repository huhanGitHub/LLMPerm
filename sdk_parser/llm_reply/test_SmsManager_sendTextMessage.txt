Below is an example of a method that utilizes the Android SmsManager API to send an SMS.

Remember, sending SMS requires the SEND_SMS permission. So you need to declare it in your Android manifest file as follows:

```java
<uses-permission android:name="android.permission.SEND_SMS"/>
```

Then, you have the test method:

```java
public void test_SmsManager_sendTextMessage(String phoneNumber, String message){
    // Get the default instance of SmsManager
    SmsManager smsManager = SmsManager.getDefault();
   
    // If message length is more than the allowed, break it into chunks
    if (message.length() > 160) {
        ArrayList<String> messageParts = smsManager.divideMessage(message);
        smsManager.sendMultipartTextMessage(phoneNumber, null, messageParts, null, null);
    } else {
        // If the message length is under 160 characters, just send it as-it-is
        smsManager.sendTextMessage(phoneNumber, null, message, null, null);
    }
}
```

You can use this method in your activity by calling:

```java
test_SmsManager_sendTextMessage("1234567890", "Hello, this is a test message!");
```

This method will send an SMS to the phone number provided as the first parameter, with the content being the second parameter.

Please note that this permission is dangerous permission according to android API level >= 23(Marshmallow). You need to request it from user in runtime. Check more info here: https://developer.android.com/training/permissions/requesting