```java
import android.content.Intent;
import android.net.sip.SipManager;
import android.net.sip.SipProfile;
import android.net.sip.SipRegistrationListener;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;

public class MainActivity extends AppCompatActivity {

    private SipManager mSipManager;
    private SipProfile mSipProfile;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        try {
            test_SipManager_isRegistered();
        } catch (Exception e) {
            Log.d("SIP_TEST", "Error in test_SipManager_isRegistered: " + e.getMessage());
        }
    }

    public void test_SipManager_isRegistered() throws Exception {
        mSipManager = SipManager.newInstance(this);

        if (mSipManager == null) {
            throw new Exception("SIP Manager is null");
        }

        SipProfile.Builder builder = new SipProfile.Builder("username", "domain");
        builder.setPassword("password");
        mSipProfile = builder.build();

        mSipManager.open(mSipProfile);

        mSipManager.setRegistrationListener(mSipProfile.getUriString(), new SipRegistrationListener() {
            @Override
            public void onRegistering(String localProfileUri) {
                Log.d("SIP_TEST", "Registering with SIP Server...");
            }

            @Override
            public void onRegistrationDone(String localProfileUri, long expiryTime) {
                Log.d("SIP_TEST", "Registration successful!");
            }

            @Override
            public void onRegistrationFailed(String localProfileUri, int errorCode, String errorMessage) {
                Log.d("SIP_TEST", "Registration failed.  Please check settings.");
            }
        });
    }
    
    @Override
    public void onDestroy() {
        super.onDestroy();

        if (mSipManager != null) {
            try {
                if (mSipProfile != null) {
                    mSipManager.close(mSipProfile.getUriString());
                }
            } catch (Exception ee) {
                Log.d("SIP_TEST", "Failed to close local profile.", ee);
            }
        }
    }
}
```

In this example, we first initialize `SipManager`. Next, we construct a new `SipProfile` using a `username`, `domain` and `password`. We try to register the SipProfile via `SipManager` by calling its `open` method. Note that we are implementing the `SipRegistrationListener` to listen for the status of the Sip registration.

Also remember, never hard-code the `username`, `domain`, and `password` like in this example.

This is just a basic example to get you started. Depending on your needs, you might need to handle other things like incoming calls, outgoing calls, SIP session, etc which are beyond the scope of this example.