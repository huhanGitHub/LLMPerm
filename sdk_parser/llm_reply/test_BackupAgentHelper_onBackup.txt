Here's a basic usage example of BackupAgentHelper in an Android test method. Please note that this example does not directly test permissions, but it does demonstrate usage of the class:

```Java
// Import necessary Android classes.
import android.app.backup.BackupAgentHelper;
import android.app.backup.BackupDataOutput;
import android.app.backup.BackupDataInput;
import android.os.ParcelFileDescriptor;
import android.content.Context;

public class TestActivity extends Activity {

    // Create a testBackupAgentHelper class that extends the BackupAgentHelper.
    public class TestBackupAgentHelper extends BackupAgentHelper {
      // Need to override the three abstract methods.
      public void onCreate() {}
      public void onBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState) {}
      public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescriptor newState) {}
    }

    // Create a method to test BackupAgentHelper_onBackup method created above. 
    public void test_BackupAgentHelper_onBackup() {
       // Create a TestBackupAgentHelper instance.
       TestBackupAgentHelper backupAgentHelper = new TestBackupAgentHelper();

       // Define the necessary parameters for onBackup method.
       ParcelFileDescriptor oldState = null;
       BackupDataOutput data = null;
       ParcelFileDescriptor newState = null;

       // Because onBackup method is public, we can just call it directly.
       backupAgentHelper.onBackup(oldState, data, newState);

       // Please note that this is a simple test method;
       // a real test should have assertions to verify the functionality of the method.
    }
}
```
Notice that the TestBackupAgentHelper class extends the BackupAgentHelper class and the onBackup method is overridden. The test_BackupAgentHelper_onBackup method creates a new instance of TestBackupAgentHelper and calls the onBackup method with null arguments.

Please note that in a real-world scenario, you would supplement this basic skeleton to actually perform backups and restore data, manage the oldState and newState appropriately, and add exception handling. You would also incorporate logic to verify the expected outcome and validate correct functionality.