Sure. Here is a self-contained method named `test_SensorManager_createDirectChannel`, making use of the `SensorManager.createDirectChannel()` API available in Android:

```java
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.hardware.SensorDirectChannel;
import android.os.MemoryFile;
import android.util.Log;

public void test_SensorManager_createDirectChannel(Context context) {
    try {
        SensorManager sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);     

        // Check if the device sensor supports the Sensor Direct Channel.
        if (sensorManager == null ||
            sensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER).isEmpty() ||
            !sensorManager.isDirectChannelTypeSupported(SensorDirectChannel.TYPE_HARDWARE_BUFFER)) {
            Log.d("test_SensorManager", "Device doesn't support Sensor Direct Channel.");
            return;
        }

        // Creating a Shared Memory backed Direct Channel.
        final int bufferSize = 1024;
        MemoryFile memFile = new MemoryFile("testSensor", bufferSize);
        SensorDirectChannel channel = sensorManager.createDirectChannel(memFile.getFileDescriptor());
        
        // Be sure to clean up after, close direct channel and memory file when they are not needed.
        if (channel != null) {
            channel.close();
        }
        memFile.close();
    } catch (Exception e) {
        Log.e("test_SensorManager", "Error in creating Direct Channel: " + e.getMessage());
    }
}
```
Please note that the `createDirectChannel` method is used to create a channel to the sensor hardware for the user to get sensor data directly streaming into user supplied buffers. The data rate and latency of these type of sensor streams are set by sensor devices along with other sensing parameters. 

In this code, an accelerometer sensor type is used as an example, but the selection of the sensor type should depend on your specific needs. 

Also note that sensor direct channel is only available in API 26 (Android O, 8.0) and later. It's often used in contexts requiring high performance and low latency, such as VR or AR applications.