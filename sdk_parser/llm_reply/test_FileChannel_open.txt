Sure, here's a simple example of how you might go about implementing a test for the FileChannel 'open' method in a Android app. This method will open a FileChannel, write something to it, and then read it back to confirm the contents.

It should be noted that FileChannel operations could throw IOException, so the following method should handle or throw these exceptions.

In this example, we will test writing a text to a file, and reading it back:

```java
public void test_FileChannel_open() throws IOException {
    String filename = "test.txt";
    String testInput = "Test data for FileChannel.";

    // Open a file channel in write mode
    RandomAccessFile file = new RandomAccessFile(filename, "rw");
    FileChannel writeFileChannel = file.getChannel();

    // Prepare a buffer to write to the file
    ByteBuffer buffer = ByteBuffer.allocate(64);
    buffer.clear();
    buffer.put(testInput.getBytes());
    buffer.flip();

    // Write to the file
    while(context.buffer.hasRemaining()) {
        writeFileChannel.write(buffer);
    }

    // Close the file
    writeFileChannel.close();
    file.close();

    // Now, open the file in read mode
    file = new RandomAccessFile(filename, "r");
    FileChannel readFileChannel = file.getChannel();

    // Prepare a buffer to read back the file
    buffer = ByteBuffer.allocate(64);
    buffer.clear();

    // Read back the file
    readFileChannel.read(buffer);
    
    // Convert the buffer into a string
    String result = new String(buffer.array()).trim();

    // Make sure the content written matches read back
    if (!result.equals(testInput)) {
        System.out.println("File write/read test failed: Content mismatch");
    }

    // Close read file channel
    readFileChannel.close();
    file.close();
}
```

This simple test will check if the content read back from the file matches the content that was written. Note: For real unit tests, instead of `System.out.println`, consider using assertion library or `Assert` method from testing library like JUnit. Also, you might want to handle exceptions properly rather than just propagating them.