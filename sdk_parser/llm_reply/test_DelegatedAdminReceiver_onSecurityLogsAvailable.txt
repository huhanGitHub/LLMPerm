Here's a typical example of how you can test `onSecurityLogsAvailable` from `DelegatedAdminReceiver` in an Android Activity. In this example, we won't actually obtain any real security logs as it requires a Device/User to be affiliated in order to correctly implement DevicePolicyManager. This leads to your test not being self contained because to get such security logs you need a test device which is managed through an Enterprise Mobility Management system.

```java
import android.app.admin.DevicePolicyManager;
import android.app.admin.DelegatedAdminReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

public class MyActivity extends AppCompatActivity {

    private static final String TAG = "MyActivity";

    private MyDelegatedAdminReceiver myDelegatedAdminReceiver;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my);

        myDelegatedAdminReceiver = new MyDelegatedAdminReceiver();

        // practices to simulate calling onSecurityLogsAvailable
        test_DelegatedAdminReceiver_onSecurityLogsAvailable();
    }

    void test_DelegatedAdminReceiver_onSecurityLogsAvailable(){
        Context context = getApplicationContext();
        Intent intent = new Intent();
        myDelegatedAdminReceiver.onSecurityLogsAvailable(context, intent);
    }

    class MyDelegatedAdminReceiver extends DelegatedAdminReceiver {

        @Override
        public void onSecurityLogsAvailable(Context context, Intent intent) {
            DevicePolicyManager devicePolicyManager 
                = (DevicePolicyManager) context.getSystemService(Context.DEVICE_POLICY_SERVICE);
            ComponentName componentName = new ComponentName(context, this.getClass());

            try {
                // Due to device affiliation restrictions, we can't guarantee retrieving security logs in this test.
                // You should see an exception similar to "java.lang.SecurityException: Admin does not have android.app.action.SECURITY_LOGS_AVAILABLE"
                String logs = devicePolicyManager.retrieveSecurityLogs(componentName).toString();
                Log.d(TAG, "Security Logs: " + logs);
            } catch (SecurityException e) {
                Log.e(TAG, "Failed to retrieve security logs.", e);
            }
        }
    }
}
```
This method uses a local instance of a `DelegatedAdminReceiver` subclass and simulates the call to `onSecurityLogsAvailable`, then it attempts to retrieve security logs, and logs an error if it fails. Realistically, in production, you wouldn't call this method directly - it's the system that calls this method when security logs are available. Also, remember this functionality requires a Device Administration system with a managed testing device in order to function correctly.