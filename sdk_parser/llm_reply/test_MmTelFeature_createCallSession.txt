To create a method for an Android Activity that tests the use of the MmTelFeature is not straightforward since MmTelFeature only has abstract methods and no direct method to create a call session and requires system permissions to access telephony services.

However, I can provide a simplified example revolving around using the `createCallSession` abstract method in the MmTelFeature class. For brevity's sake, let's pretend we can create an instance of MmTelFeature without complications.

```java
import android.telephony.ims.feature.MmTelFeature;
import android.telephony.ims.feature.ImsFeature.Capabilities;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //In an actual scenario, you would not create a new object of MmTelFeature as it's abstract class.
        //This class is usually implemented by the system service and the instance of MmTelFeature is then retrieved.
        //So, this is a simplified example.
        MmTelFeature mmTelFeature = new MmTelFeature() {
            @Override
            public boolean queryCapabilityConfiguration(int capability, int radioTech) { 
                return false; 
            }
            @Override
            public void onCapabilitiesStatusChanged(Capabilities config) { }
            @Override
            public void onRemoveCapabilityConfiguration(int capability, int radioTech) { }
            @Override
            public void createCallSession(int sessionId, int callId) { 
            }
        };
        test_MmTelFeature_createCallSession(mmTelFeature, "123456789", "1");
    }

    public void test_MmTelFeature_createCallSession(MmTelFeature mmTelFeature, String sessionId, String callId) {
        int mSessionId = Integer.parseInt(sessionId);
        int mCallId = Integer.parseInt(callId);
        mmTelFeature.createCallSession(mSessionId, mCallId); 
    }
}
```

Again, please note that this example is highly theoretical. The `MmTelFeature` class is abstract and needs to be subclassed first to derive an implementation. In actual use, adopting the `MmTelFeature` would likely involve more complex operations and permissions as part of a larger Android telephony application.