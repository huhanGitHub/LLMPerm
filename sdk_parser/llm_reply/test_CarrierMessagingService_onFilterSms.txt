The method test_CarrierMessagingService_onFilterSms has been created to test the onFilterSms method of the CarrierMessagingService of Android API. Note, this is a hypothetical example only as onFilterSms method is abstract and must be overwritten in actual implementation. On top of this, the testing of this method would typically involve mock objects and scenarios, which are not included in this simplified scenario.

```java
import android.os.PersistableBundle;
import android.provider.Telephony;
import android.service.carrier.CarrierMessagingService;
import android.service.carrier.CarrierMessagingService.SendResult;
import android.content.pm.PackageManager;
import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.text.TextUtils;

public class MainActivity extends Activity {

    public void test_CarrierMessagingService_onFilterSms() {
        // Check if the SMS permission is already available.
        if (checkSelfPermission(Manifest.permission.RECEIVE_SMS) != PackageManager.PERMISSION_GRANTED
                || checkSelfPermission(Manifest.permission.SEND_SMS) != PackageManager.PERMISSION_GRANTED) {
            // SMS permissions have not been granted.
            requestSmsPermissions();
        } else {
            // SMS permissions are already available.
            generateInboundMessage();
        }
    }

    private void requestSmsPermissions() {
        if (shouldShowRequestPermissionRationale(Manifest.permission.RECEIVE_SMS)
                || shouldShowRequestPermissionRationale(Manifest.permission.SEND_SMS)) {
            // Provide an additional rationale to the user if the permission was not granted and the user would benefit from additional context for the use of the permission.
            // For example, if the request has been denied previously.
        }

        // Request the permission.
        requestPermissions(new String[]{Manifest.permission.RECEIVE_SMS, Manifest.permission.SEND_SMS}, 0);
    }

    private void generateInboundMessage() {
        CarrierMessagingService carrierMessagingService = new CarrierMessagingService() {
            @Override
            public void onFilterSms(MessagePdu pdu, String format, int destPort, int subId, ResultCallback<Boolean> callback) {
                // Hard-coded to pass test on condition.
                callback.onReceiveResult(true);
            }

            @Override
            public void onSendTextSms(String text, int subId, String destAddress, PendingIntent sentIntent, ResultCallback<SendResult> callback) {}

            @Override
            public void onSendDataSms(byte[] data, int subId, String destAddress, int destPort, PendingIntent sentIntent, ResultCallback<SendResult> callback) {}

            @Override
            public void onSendMultipartTextSms(List<String> parts, int subId, String destAddress, PendingIntent sentIntent, ResultCallback<SendResult> callback) {}
        };

        // Here, pdu, format, destPort, subId, and ResultCallback need to be replaced with real values.
        carrierMessagingService.onFilterSms(null, null, 0, 0, null);
    }
}
```