Sure, here is an example of how you might use the `onWrite` method from `PrintDocumentAdapter` in Android. Please note that the `PrintDocumentAdapter` class is used for printing content from Android applications.

```java
public void test_PrintDocumentAdapter_onWrite() {
    PrintDocumentAdapter adapter = new PrintDocumentAdapter() {
        @Override
        public void onWrite(PageRange[] pages, ParcelFileDescriptor destination, CancellationSignal cancellationSignal, WriteResultCallback callback) {
            InputStream input = null;
            OutputStream output = null;

            try {
                File file = new File(Environment.getExternalStorageDirectory(), "testFile.pdf");
                input = new FileInputStream(file);
                output = new FileOutputStream(destination.getFileDescriptor());

                byte[] buf = new byte[1024];
                int bytesRead;

                while ((bytesRead = input.read(buf)) > 0) {
                    output.write(buf, 0, bytesRead);
                }

                callback.onWriteFinished(new PageRange[]{PageRange.ALL_PAGES});

            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    input.close();
                    output.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    };

    PrintAttributes attributes = new PrintAttributes.Builder()
            .setMediaSize(PrintAttributes.MediaSize.ISO_A4)
            .setResolution(new PrintAttributes.Resolution("1", "print test", 300, 300))
            .setMinMargins(new PrintAttributes.Margins(5, 5, 5, 5))
            .build();

    PrintManager printManager = (PrintManager) getSystemService(Context.PRINT_SERVICE);
    printManager.print("Print test", adapter, attributes);
}
```

This code will print an example file named "testFile.pdf" from the device's external storage. Note that you will need the permissions to read and write external storage. Also, remember that this code should be run in a Thread, Handler, or AsyncTask because it has a long-running task (read and write file). 

Moreover, there is no exception handling for `FileNotFoundException` if "testFile.pdf" is not found in the directory. You will need to handle this exception as per your requirements.