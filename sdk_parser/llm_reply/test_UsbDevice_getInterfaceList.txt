Sure, Here's a simple function to test the getInterfaceList method from the UsbDevice class in android. Please include the necessary permissions in your AndroidManifest.xml file before using the method.

The following permissions need to be added:

```xml
<uses-feature android:name="android.hardware.usb.host" android:required="true" />
<uses-permission android:name="android.permission.USB_PERMISSION" />
```

Then you can use this method:

```java
public void test_UsbDevice_getInterfaceList() {
    UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);
    HashMap<String, UsbDevice> deviceList = manager.getDeviceList();

    for (UsbDevice device : deviceList.values()) {

        if (device != null) {
            Log.v(TAG, "Device Name: " + device.getDeviceName());
            Log.v(TAG, "Device ID: " + device.getDeviceId());
            Log.v(TAG, "Device Protocol: " + device.getDeviceProtocol());

            int interfaceCount = device.getInterfaceCount();
            Log.v(TAG, "Device Interface Count: " + interfaceCount);
            for (int i = 0; i < interfaceCount; i++) {
                UsbInterface usbInterface = device.getInterface(i);
                Log.v(TAG, "Interface " + i + ": " + usbInterface.toString());
            }
        }
    }
}
```

In this test method, it first gets a UsbManager object by calling getSystemService(Context.USB_SERVICE). Then it gets a list of all connected USB devices. It iterates over each device, and for each device it prints the name, ID, protocol and the interfaces it has.

For each interface in a device, it prints the interface details. Remember you have to prompt user to give the permission to access the USB device before interacting with the device.