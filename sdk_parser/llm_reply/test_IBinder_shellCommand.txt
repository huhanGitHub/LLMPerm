Here is an example of a self-contained Java method that tests the functionality of the shellCommand() method of the IBinder interface from the android.os package. We do not have an actual API for checking Android permissions, but we simulate the check of permissions by using "fakePermissionCheck" method. 

In Android, IBinder is an interface that defines methods for managing the life cycle of an Android service. Please note that IBinder's methods aren't usually called directly - they are implemented by a Service or a BroadcastReceiver.

```java
import android.content.Context;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Parcel;
import android.os.RemoteException;

public void test_IBinder_shellCommand() {
    IBinder binder = new IBinder() {
        @Override
        public boolean isBinderAlive() {
            return false;
        }

        @Override
        public IInterface queryLocalInterface(String descriptor) {
            return null;
        }

        @Override
        public void dump(FileDescriptor fd, String[] args) throws RemoteException {}

        @Override
        public void dumpAsync(FileDescriptor fd, String[] args) throws RemoteException {}

        @Override
        public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
            return false;
        }

        @Override
        public void linkToDeath(DeathRecipient recipient, int flags) throws RemoteException {}

        @Override
        public boolean unlinkToDeath(DeathRecipient recipient, int flags) {
            return false;
        }

        @Override
        public void shellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err, String[] args, ShellCallback callback, ResultReceiver resultReceiver) throws RemoteException {
            if (fakePermissionCheck(args)) {
                // Assuming command success
                resultReceiver.send(0, null);
            } else {
                // Assuming command failure due to insufficient permissions
                resultReceiver.send(-1, null);
            }
        }
    };

    String[] commandAndArgs = new String[] {"command", "arg1", "arg2"};
    
    ResultReceiver resultReceiver = new ResultReceiver(null) {
        @Override
        protected void onReceiveResult(int resultCode, Bundle resultData) {
            if (resultCode == 0) {
                System.out.println("Command executed successfully.");
            } else if (resultCode == -1) {
                System.out.println("Command execution failed due to insufficient permissions.");
            }
        }
    };

    try {
        FileDescriptor inFD = null;
        FileDescriptor outFD = null;
        FileDescriptor errFD = null;
        binder.shellCommand(inFD, outFD, errFD, commandAndArgs, null, resultReceiver);
    } catch (RemoteException e) {
        e.printStackTrace();
    }
}

private boolean fakePermissionCheck(String[] args) {
    // Could flesh out args handling here to more realistically mimic permission checks
    return args.length > 0;
}
```

This is a test function and may not work as expected in a production app. This is because IBinder objects are typically obtained from a Service or a BroadcastReceiver, and not created directly. Furthermore, filesystem interactions and remote procedure calls are inherently complex and may throw a number of Exceptions not handled in this simple example.