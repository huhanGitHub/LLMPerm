Here is an example of a method, `test_FileOutputStream_write`, which illustrates the usage of `java.io.FileOutputStream.java`:

```Java
public void test_FileOutputStream_write() {
    // the name of the file to open
    String fileName = "testfile.txt";
    
    FileOutputStream fos = null;
    try {
        // Open the file for writing
        fos = new FileOutputStream(fileName);
        
        // The string to write to the file
        String contentToWrite = "This is a test content!";
        
        // Convert the String content to bytes
        byte[] byteArray = contentToWrite.getBytes();
        
        // Write bytes to file
        fos.write(byteArray);
        
        // close the file output stream
        fos.close();
        
        // confirmation message
        Toast.makeText(this, "Successfully written to the file.", Toast.LENGTH_LONG).show();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
        Toast.makeText(this, "File not found", Toast.LENGTH_LONG).show();
    } catch (IOException e) {
        e.printStackTrace();
        Toast.makeText(this, "Error initializing stream", Toast.LENGTH_LONG).show();
    } finally {
        try {
            if (fos != null) {
                fos.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
            Toast.makeText(this, "Error closing file output stream", Toast.LENGTH_LONG).show();
        }
    }
}
```

This method will write a given string to a file. If the file does not exist, it will be created. If it already exists, it will be overwritten. 

Please remember that file operations require the `WRITE_EXTERNAL_STORAGE` permission, so you need to add `<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />` into your `AndroidManifest.xml` file and request the permission at runtime if your app targets Android 6.0 (API level 23) and higher, before calling this method. This example does not include the necessary code to request these permissions. Also, this will not work on API versions above 28 if targeting scoped storage unless it is a media file or in the application specific directories.