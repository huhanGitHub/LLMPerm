Below is an example of a method test_DatagramChannel_connect which connects the DatagramChannel to a server at a specific address and port number.

```java
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;

public class MainActivity extends AppCompatActivity {
    
    private DatagramChannel channel;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        try {
            test_DatagramChannel_connect();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    

    public void test_DatagramChannel_connect() throws IOException {
        // Create a new DatagramChannel
        channel = DatagramChannel.open();

        // Connect to the server at localhost on port 8000
        channel.connect(new InetSocketAddress("localhost", 8000));
        
        // Create a ByteBuffer to hold data to be sent to the server
        ByteBuffer buffer = ByteBuffer.allocate(1024);

        // Write data to the buffer
        buffer.put("Hello, World!".getBytes());
        buffer.flip();

        // Send the buffer to the server
        channel.write(buffer);

        // Now receive data
        buffer.clear();
        channel.read(buffer);

        // Flip the buffer to read it
        buffer.flip();

        // Convert the data into a string
        String receivedData = new String(buffer.array(), 0, buffer.limit());

        // Print the received data
        System.out.println(receivedData);
        
        // Finally close the channel
        channel.close();
    }
}
```
This method creates a DatagramChannel, connects it to a server running on localhost and port 8000, sends a string "Hello, World!" to the server, and then reads the response from the server. Finally, the DatagramChannel is closed. Note that you need to replace "localhost" and 8000 with actual server address and port in real scenario. Also, exception handling should be properly implemented in production code.

Also, note that network operations (like connecting to a server, transferring data over network) should ideally not run on the main (UI) thread in Android applications, as they can block the UI and lead to an unresponsive application. You should run this method on a background thread or use AsyncTask, Handlers, or similar.