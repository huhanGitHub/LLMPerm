In Android, you can use the GeolocationPermissions API to retrieve the geolocation permissions for a particular website.

Here's an example method `test_GeolocationPermissions_getAllowed` that you can use as an usage example. This method queries the geolocation permission status for a sample origin "https://www.example.com".

This method should be implemented in an Android activity:

```java
/**
 * The method queries the GeoLocation permissions for a website origin.
 */
private void test_GeolocationPermissions_getAllowed() {
    WebView webView = new WebView(this);
    webView.getSettings().setJavaScriptEnabled(true);

    webView.setWebChromeClient(new WebChromeClient() {
        @Override
        public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
            callback.invoke(origin, true, false);
        }
    });

    webView.setWebViewClient(new WebViewClient() {
        @Override
        public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);

            GeolocationPermissions.getInstance().getAllowed(origin, new GeolocationPermissions.Callback() {
                @Override
                public void invoke(String origin, boolean allowed, boolean retained) {
                    if (allowed) {
                        Log.v("GeolocationPermissionTest", origin + " is allowed to use geolocation.");
                    } else {
                        Log.v("GeolocationPermissionTest", origin + " is not allowed to use geolocation.");
                    }
                }
            });
        }
    });

    // Load a webpage that will request geolocation permissions.
    webView.loadUrl("https://www.example.com");
}
```

This function starts by enabling JavaScript on a WebView and setting the geolocation permissions for a sample website, "https://www.example.com", to true. It then requests the current geolocation permissions for this origin and prints the status to logcat.

Remember that if your target API level is 23 (Android 6.0) and above, you need to manually request the ACCESS_FINE_LOCATION permission from the user before the website can access geolocation information.

Please note that webview and geolocation must be used carefully because they can potentially expose sensitive information and be targets for attacks if not correctly configured.