Here is a simple piece of Java code that demonstrates the usage of java.nio.file.spi.FileSystemProvider:

```java
import android.util.Log;

import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.spi.FileSystemProvider;
import java.util.Set;

public void test_FileSystemProvider_newByteChannel() {
    try {
        // Get the default FileSystemProvider
        FileSystem fileSystem = FileSystems.getDefault();
        FileSystemProvider provider = fileSystem.provider();

        // Create a Path instance
        Path file = Paths.get("path-to-your-file");

        // Open a channel to the file
        SeekableByteChannel byteChannel = provider.newByteChannel(file, null);

        // Create a ByteBuffer and read data from the channel
        ByteBuffer buffer = ByteBuffer.allocate(1024);
        int bytesRead = byteChannel.read(buffer);

        byteChannel.close();

        Log.e("test_FileSystemProvider", "Bytes read: " + bytesRead);

    } catch (Exception e) {
        Log.e("test_FileSystemProvider", "Exception: " + e.getMessage());
    }
}
```

The example starts by getting the default `FileSystemProvider`. Then it creates a `Path` instance pointing to the file "path-to-your-file". Then it opens a `SeekableByteChannel` to this file. Finally, it reads data from the byte channel into a `ByteBuffer`.

You would need to replace "path-to-your-file" with the path to the file you want to use for testing.

Please note that Android does not allow file operations on the main thread. In an actual Android application, you would need to put this code in a worker thread.