Here is a sample method named test_Logger_setLevel that you can use to illustrate the usage of java/util/logging/Logger API setLevel method in Android:

```Java
import android.util.Log;
import java.util.logging.*;

public void test_Logger_setLevel() {
  // Create a Logger
  Logger logger = Logger.getLogger("MyLogger");

  try {
    // Set level to SEVERE
    logger.setLevel(Level.SEVERE);
    Log.d("Logger_Test", "Logger level set to: " + logger.getLevel());

    // Generate a severe level log message
    logger.severe("This is a severe message");
    // Note: This message will be displayed as the logger level is set to SEVERE

    // Set level to INFO
    logger.setLevel(Level.INFO);
    Log.d("Logger_Test", "Logger level set to: " + logger.getLevel());

    // Generate a severe level log message and an info level log message
    logger.severe("This is a severe message");
    logger.info("This is an info message");
    // Note: Both messages will be displayed as the logger level is set to INFO

    // Set level to OFF
    logger.setLevel(Level.OFF);
    Log.d("Logger_Test", "Logger level set to: " + logger.getLevel());

    // Generate a severe level log message and an info level log message
    logger.severe("This is a severe message");
    logger.info("This is an info message");
    // Note: None of the messages will be displayed as the logger level is set to OFF

  } catch (SecurityException se) {
    Log.e("Logger_Test", "SecurityException occured: ", se);
  } catch (RuntimeException re) {
    Log.e("Logger_Test", "RuntimeException occured: ", re);
  }
}
```

The method creates a Logger and sets different level values. By changing the level value, it influences which log messages will be visible. The method also handles SecurityException and RuntimeException that can be thrown by the setLevel method. Always ensure that no sensitive information is logged in product releases.