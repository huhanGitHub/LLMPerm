Though Android typically favours the `android.util.Log` class for logging purposes, here is a simplified example of how Java's `java.util.logging.FileHandler` could be used in an Android context. 

The method `test_FileHandler_openFiles` will open a text file and write a message into it. Please use the required permissions to read and write in external storage in your Android Manifest file.

```java
import java.io.IOException;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

public void test_FileHandler_openFiles() {

    Logger logger = Logger.getLogger("MyLog");
    FileHandler fh;

    try {
        // The log file will be located in your application's private data folder. 
        // For this example, you may need to add permissions for writing to external storage.
        String filePath = this.getApplicationContext().getFilesDir().getPath().toString() + "/LogFile.log";
        fh = new FileHandler(filePath);

        // Set the logger to use the File Handler
        logger.addHandler(fh);

        // Optional, removes the default Console Handler
        logger.setUseParentHandlers(false);

        // Set the logger level to control what messages will be logged
        logger.setLevel(Level.ALL);

        SimpleFormatter formatter = new SimpleFormatter();  
        fh.setFormatter(formatter); 

        // Log an INFO message
        logger.info("Logging started");

    } catch (SecurityException e) {
        e.printStackTrace();
        logger.log(Level.SEVERE, "Security exception", e);
    } catch (IOException e) {
        e.printStackTrace();
        logger.log(Level.SEVERE, "IO exception", e);
    }
}
```

Remember to add the necessary permissions in your AndroidManifest.xml file if you are logging to a file in external storage:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```