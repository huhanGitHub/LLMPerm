Here is a method, named `test_Files_isExecutable`. This method checks if a given file is executable. I've added extra checks to make sure the file exists before attempting to check executability. Please modify the name of the target file at your convenience.

Since Android does not allow file operations on UI thread due to performance reasons, you should run such operations on a separate thread or use Asynchronous tasks for a more robust application.

```java
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.IOException;

public void test_Files_isExecutable() {

    new Thread(new Runnable(){
        @Override
        public void run(){
            // File path - Modify based on the file you want to check
            String filePath = "/path/to/your/file";

            try {
                // Check if file is executable
                if (Files.exists(Paths.get(filePath))) {
                    boolean isExecutable = Files.isExecutable(Paths.get(filePath));
                    if (isExecutable) {
                        System.out.println("The file is executable.");
                    } else {
                        System.out.println("The file is not executable.");
                    }
                } else {
                    System.out.println("The file does not exist.");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }).start();
}
```
This is a very basic example of how to use the `Files.isExecutable` method. In a robust application, you'll want to handle the possibility of an `IOException` being thrown in a more user-friendly manner.
Since this is a simple console message printing, to actually see results on Android, you could use `Log.d()` or you could setup a `TextView` to display this information in your activity.