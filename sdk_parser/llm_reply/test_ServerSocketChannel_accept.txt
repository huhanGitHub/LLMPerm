Due to the nature of Android activities, a server socket shouldn't be placed within it. Instead, a background service or separate thread should be used because server sockets tend to block the current thread until a connection is received. However, for the purpose of demonstrating a ServerSocketChannel accept method, the following implementation could be used.

```java
public void test_ServerSocketChannel_accept() {
    // Create a new thread to prevent blocking the UI thread
    new Thread(new Runnable() {
        @Override
        public void run() {
            ServerSocketChannel serverSocketChannel = null;
            SocketChannel socketChannel = null;

            try {
                // Open the server socket channel and bind it to an automatic available port
                serverSocketChannel = ServerSocketChannel.open();
                serverSocketChannel.socket().bind(new InetSocketAddress(0));
                
                // Define sockets blocks when accepting connections.
                serverSocketChannel.configureBlocking(true);
                
                Log.i("ServerSocketChannel", "Server is waiting for client on port " + serverSocketChannel.socket().getLocalPort());
                
                // Blocking operation, will return a socket channel for each new client
                socketChannel = serverSocketChannel.accept();

                Log.i("ServerSocketChannel", "Connected with client on port " + socketChannel.socket().getPort());                
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (socketChannel != null) {
                        socketChannel.close();
                    }
                    if (serverSocketChannel != null) {
                        serverSocketChannel.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }).start();
}
```

This is a simple method named test_ServerSocketChannel_accept, which uses the ServerSocketChannel's accept method. However, due to the blocking nature of the method, it's done inside a new thread to prevent blocking the user interface thread. Please note that in a real scenario, this could be part of a Service and/or properly managed with error control, cleanups, etc.